<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
			 minWidth="195" minHeight="21" alpha="1" focusEnabled="false"
			 creationComplete="init()" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:iconcheckbox="cc.sitemaker.common.views.iconcheckbox.*">
	
	<fx:Metadata>[HostComponent("spark.components.ButtonBarButton")]</fx:Metadata>
	
	<fx:Script>
		
		import mx.events.FlexEvent;
		import mx.binding.utils.BindingUtils;
		static private const exclusions:Array = ["labelDisplay"];
		
		/** 
		 * @copy spark.skins.SparkSkin#colorizeExclusions
		 */     
		override public function get colorizeExclusions():Array {return exclusions;}
		
		protected function init():void {
			hostComponent.mouseChildren = true;
			hostComponent.focusEnabled = false;
			
			try {
				if (hostComponent.data.hasOwnProperty("icon")) {
					iconImg.source = hostComponent.data.icon;
				}
				if (hostComponent.data.hasOwnProperty("label")) {
					labelDisplay.visible = labelDisplay.includeInLayout = (hostComponent.data.label != "");
					labelDisplay.text = hostComponent.data.label;
				}
				if (hostComponent.data.hasOwnProperty("selected")) {
					//chk.selected = hostComponent.data.selected;
					BindingUtils.bindProperty(chk, "selected", hostComponent.data, "selected");
				}
			} catch (err:*) {
				// ignore
			}
			
			iconImg_changeHandler(null);
		}
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void{
			super.updateDisplayList(unscaledWidth, unscaledHeight);
			
			init();
		}
		
		protected function iconImg_changeHandler(event:Event):void{
			if (hostComponent.data.hasOwnProperty("selected")) {
				hostComponent.data.selected = chk.selected;
			}
			
			if (chk.selected){
				iconImg.filters = null;
			} else {
				iconImg.filters = [cmf];
			}
		}
		
		protected function chk_clickHandler(event:MouseEvent):void{
			event.stopImmediatePropagation();				
			event.stopPropagation();				
		}
		
		[Bindable]
		public var cornerRadius:Number = 3;
		
		private var rLum:Number = 0.2225;
		private var gLum:Number = 0.7169;
		private var bLum:Number = 0.0606;
		[Bindable]
		private var bwMatrix:Array = [rLum, gLum, bLum, 0, 0,
			rLum, gLum, bLum, 0, 0,
			rLum, gLum, bLum, 0, 0,
			0, 0, 0, 1, 0];
		
	</fx:Script>
	
	<fx:Declarations>
		<s:ColorMatrixFilter id="cmf" matrix="{bwMatrix}" />
	</fx:Declarations>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" stateGroups="overStates" />
		<s:State name="down" stateGroups="downStates" />
		<s:State name="disabled" stateGroups="disabledStates" />
		<s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
		<s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
		<s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
		<s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
	</s:states>
	
	<s:Group left="0" right="0" top="0" bottom="0">
		
		<s:Rect left="1" right="0" top="1" bottom="1" 
				topLeftRadiusX="{cornerRadius}" topRightRadiusX="{cornerRadius}">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="0xE9E9E9" 
									 color.overAndSelected="0xFFFFFF"
									 color.disabledAndSelected="0xFFFFFF"
									 color.downAndSelected="0xFFFFFF"
									 color.disabled="0xCCCCCC"
									 color.upAndSelected="0xFFFFFF"
									 color.over="0xF5F5F5"
									 alpha="1"/>
					<s:GradientEntry color="0xD9D9D9" 
									 color.overAndSelected="0xFFFFFF"
									 color.disabledAndSelected="0xFFFFFF"
									 color.disabled="0xCCCCCC"
									 color.downAndSelected="0xFFFFFF"
									 color.upAndSelected="0xFFFFFF"
									 color.over="0xD9D9D9"
									 alpha="1"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		
		<s:Rect left="0" right="0" top="0" bottom="0"
				topLeftRadiusX="{cornerRadius}" topRightRadiusX="{cornerRadius}">
			<s:stroke>
				<s:SolidColorStroke color="0xB3B3B3" 
									alpha="1" 
									alpha.overAndSelected="1"
									alpha.disabledAndSelected="1"
									alpha.upAndSelected="1"
									alpha.downAndSelected="1"
									alpha.over="1"/> 
			</s:stroke>
		</s:Rect>	
		
		<s:Line left="1" right="1" bottom="0">
			<s:stroke>
				<s:SolidColorStroke color="#FFFFFF" 
									alpha="0"
									alpha.overAndSelected="1"
									alpha.disabledAndSelected="1"
									alpha.upAndSelected="1"
									alpha.downAndSelected="1"
									caps="square" pixelHinting="false"/> 
			</s:stroke>
		</s:Line>
	</s:Group>
	
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle" 
								paddingLeft="10" paddingRight="6"
								paddingTop="6" paddingBottom="6" gap="2"/>
		</s:layout>
		<s:CheckBox id="chk" alpha.disabled="0.3" 
					change="iconImg_changeHandler(event)" 
					click="chk_clickHandler(event)" 
					valueCommit="iconImg_changeHandler(event)"
					skinClass="cc.sitemaker.social.view.components.skin.SocialButtonBarCheckBoxSkin"/>
		<s:Group  visible="{iconImg.source != null}" includeInLayout="{iconImg.source != null}">
			<mx:Image id="iconImg" alpha.disabled="0.3" left="7"/>
		</s:Group>
		<s:Group baselineShift="-1">
			<s:Label id="labelDisplay" alpha.disabled="0.3" left="3"/>
		</s:Group>		
	</s:Group>	
	
</s:SparkSkin>