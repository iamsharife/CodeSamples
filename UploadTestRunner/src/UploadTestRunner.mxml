<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   creationComplete="onCreationComplete(event)"
			   backgroundColor="#333333">
	
	<fx:Script>
		<![CDATA[
			import cc.sitemaker.upload.UploadState;
			import cc.sitemaker.upload.events.UploadManagerEvent;
			import cc.sitemaker.upload.manager.UploadManager;
			import cc.sitemaker.upload.model.UploadModel;
			import cc.sitemaker.upload.model.vo.UploadVO;
			import cc.sitemaker.upload.service.UploadService;
			
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			
			private var _manager:UploadManager;
			
			protected function onCreationComplete(event:FlexEvent):void{
				_manager = new UploadManager(this);
				
				uploadingFiles.dataProvider = uploadingFilesList.dataProvider = _manager.getModel().uploads;	
				
				addEventListeners();
			}
			
			private function addEventListeners():void {
				this.addEventListener(UploadManagerEvent.UPLOAD_ADDED, onUploadAdded);				
				this.addEventListener(UploadManagerEvent.UPLOAD_COMPLETE, onUploadComplete);				
				this.addEventListener(UploadManagerEvent.UPLOAD_FAILED, onUploadFailed);				
				this.addEventListener(UploadManagerEvent.ALL_UPLOADS_COMPLETE, onAllUploadsComplete);				
			}
			
			protected function onUploadAdded(event:Event):void {
				updateCountText();
			}
			
			protected function onUploadComplete(event:Event):void {
				updateCountText();
			}
			
			protected function onUploadFailed(event:Event):void {
				updateCountText();
			}
			
			protected function onAllUploadsComplete(event:Event):void {
				updateCountText();
			}
			
			private function updateCountText():void{
				var pending:Number = _manager.getModel().getUploadCount(UploadState.PENDING);
				var failed:Number = _manager.getModel().getUploadCount(UploadState.FAILED);
				var cancelled:Number = _manager.getModel().getUploadCount(UploadState.CANCELLED);
				var complete:Number = _manager.getModel().getUploadCount(UploadState.COMPLETE);
				
				var total:Number = pending + complete + cancelled;
				
				uploadedCount.text = complete.toString();
				failedCount.text = failed.toString();
				cancelledCount.text = cancelled.toString();
				remainingCount.text = pending.toString();
				totalCount.text = total.toString();
			}
			
			protected function onSelectFile(event:MouseEvent):void	{
				var fileRef:FileReference = new FileReference();
				fileRef.addEventListener(Event.SELECT, onFileSelect);
				
				fileRef.browse();
			}
			
			protected function onFileSelect(event:Event):void {
				var fileRef:FileReference = event.target as FileReference;
				
				fileList.addItem(fileRef);
			}
			
			protected function onUploadClick(e:MouseEvent):void{
				
				var files:Vector.<FileReference> = new Vector.<FileReference>();
				for (var i:int = 0; i < fileList.length; i++){
					var fileRef:FileReference = fileList.getItemAt(i) as FileReference;
					files.push(fileRef);
				}
				
				_manager.uploadFiles(files);
			}
			
			private function stateFunc(item:Object, column:DataGridColumn):String{
				
				var result:String = "";
				var state:String = (item as UploadVO).state;
				switch(state) {
					case UploadState.COMPLETE:
						result = "Uploaded";
						break;
					case UploadState.IN_PROGRESS:
						result = "In Progress";
						break;
					case UploadState.PENDING:
						result = "Queued";
						break;
					case UploadState.CANCELLED:
						result = "Cancelled";
						break;
					case UploadState.FAILED:
						result = "Failed";
						break;
					default:
						break;
				}
				return result;
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ArrayList id="fileList" />
	</fx:Declarations>
	
	<s:VGroup horizontalCenter="0" verticalCenter="0" horizontalAlign="center">
		<s:Button label="Select file" click="onSelectFile(event)" width="100%" />
		<s:List dataProvider="{fileList}" labelField="name" />
		<s:Button label="Upload Files" click="onUploadClick(event)" width="100%" />
		<mx:DataGrid id="uploadingFiles" width="800" rowCount="10">
			<mx:columns>
				<mx:DataGridColumn dataField="name" headerText="Name" width="120" />
				<mx:DataGridColumn dataField="bytesLoaded" headerText="Loaded" width="60" />
				<mx:DataGridColumn dataField="bytesTotal" headerText="Total" width="60" />
				<mx:DataGridColumn dataField="state" headerText="State" labelFunction="stateFunc" width="75" />
				<mx:DataGridColumn dataField="mref" headerText="MRef" />
			</mx:columns>
		</mx:DataGrid>
		
		<s:List id="uploadingFilesList" width="100%" itemRenderer="UploadRenderer">
			<s:layout>
				<s:TileLayout />
			</s:layout>
		</s:List>
		
		<s:HGroup width="100%">
			<s:Label text="{(uploadingFiles.selectedItem as UploadVO).name}" color="#FFFFFF" />
			<s:Button click="_manager.cancelUpload((uploadingFiles.selectedItem as UploadVO).fileRef)"
					  label="Cancel Upload" width="100%"/>
		</s:HGroup>
		<s:HGroup color="#00FF00">
			<s:Label text="Uploaded: " width="100" />
			<s:Label id="uploadedCount" />
		</s:HGroup>
		<s:HGroup color="#FFFF00">
			<s:Label text="Cancelled: " width="100" />
			<s:Label id="cancelledCount"/>
		</s:HGroup>
		<s:HGroup color="#FF0000">
			<s:Label text="Failed: " width="100" />
			<s:Label id="failedCount" />
		</s:HGroup>
		<s:HGroup color="#FF8000">
			<s:Label text="Remaining: " width="100" />
			<s:Label id="remainingCount" />
		</s:HGroup>
		<s:HGroup color="#0080FF">
			<s:Label text="Total: " width="100" />
			<s:Label id="totalCount" />
		</s:HGroup>
		<s:Button click="_manager.clearUploadList();"
				  label="Clear Upload(s)" width="100%"/>
	</s:VGroup>
</s:Application>
